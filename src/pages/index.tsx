import Head from 'next/head'
import Style from './home/Home.module.scss'
import PostsHome from './home/Components/PostsHome/PostsHome'
import TopPosts from './home/Components/TopPosts/TopPosts'
import connectDB from 'Utils/dbConnect'
import Post from 'Models/Post'
import User from 'Models/User'

type User = {
  name: string;
  lastName: string;
  email: string;
};

type Post = {
  _id: string
  title: string
  body: string
  author: User
  likes: number
  createdAt: string
  updatedAt: string
}

type Props = {
  posts: Post[]
  topPosts: Post[]
}

export default function Home({posts, topPosts}: Props) {

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={Style.container}>
        <section className={Style.left}>
          <PostsHome posts={posts} topPosts={topPosts}/>
        </section>

        <section className={Style.right}>
          <TopPosts />
        </section>
      </main>
    </div>
  )
}

export async function getServerSideProps() {

  try {

    connectDB()

    const res = await Post.find({})
    const top = await Post.aggregate([
      {
        $project: {
          _id: 1,
          title: 1,
          body: 1,
          author_id: 1,
          comments: 1,
          likes: 1,
          createdAt: 1,
          updatedAt: 1,
          likesCount: { $size: "$likes" }
        }
      },
      {
        $sort: {
          likesCount: -1
        }
      },
      {
        $limit: 10
      }
    ])

    const posts = await Promise.all(
      res.map(async (doc) => {
        const post = doc.toObject()
  
        post._id = `${doc._id}`
        delete post.author_id
        post.createdAt = doc.createdAt.toISOString()
        post.updatedAt = doc.updatedAt.toISOString()
        post.likes = doc.likes.length

        const author = await User.findById(`${doc.author_id}`)
        console.log(author)
        if (author) {
          const aut = author.toObject()

          delete aut._id
          delete aut.favorites_posts
          delete aut.createdAt
          delete aut.updatedAt
          delete aut.password

          post.author = aut
        }
  
        return post
      })
    )

    console.log(posts)

    const topPosts = res.map((doc) => {
      const post = doc.toObject()

      post._id = `${doc._id}`
      post.author_id = `${doc.author_id}`
      post.createdAt = doc.createdAt.toISOString()
      post.updatedAt = doc.updatedAt.toISOString()
      post.likes = doc.likes.map((like: { _id: Object }) => `${like._id}`)

      return post
    })
    
    return {
      props: {
        success: true,
        posts,
        topPosts
      }
    }
    
  } catch (error) {
    return {props: {success: false, error}}
  }
}